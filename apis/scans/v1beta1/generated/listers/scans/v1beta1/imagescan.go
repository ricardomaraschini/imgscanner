/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ricardomaraschini/imgscanner/apis/scans/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageScanLister helps list ImageScans.
// All objects returned here must be treated as read-only.
type ImageScanLister interface {
	// List lists all ImageScans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ImageScan, err error)
	// Get retrieves the ImageScan from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ImageScan, error)
	ImageScanListerExpansion
}

// imageScanLister implements the ImageScanLister interface.
type imageScanLister struct {
	indexer cache.Indexer
}

// NewImageScanLister returns a new ImageScanLister.
func NewImageScanLister(indexer cache.Indexer) ImageScanLister {
	return &imageScanLister{indexer: indexer}
}

// List lists all ImageScans in the indexer.
func (s *imageScanLister) List(selector labels.Selector) (ret []*v1beta1.ImageScan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ImageScan))
	})
	return ret, err
}

// Get retrieves the ImageScan from the index for a given name.
func (s *imageScanLister) Get(name string) (*v1beta1.ImageScan, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("imagescan"), name)
	}
	return obj.(*v1beta1.ImageScan), nil
}
